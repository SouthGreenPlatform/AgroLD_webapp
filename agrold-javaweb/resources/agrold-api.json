{
    "basePath": "/api",
    "paths": {
        "/graphs{format}": {
            "get": {
                "summary": "list all the graphs of AgroLD",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "listgraphs",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Invalid HTTP method"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["general"]
            }
        },
        "/ontologies/terms/byKeyword{format}": {
            "get": {
                "summary": "Returns all the IDs corresponding to an ontological term",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getOntologyTermsByKeyWord",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "keyword",
                        "description": "The keyword (e.g. homoaconitate)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["ontologies"]
            }
        },
        "/sparql": {
            "get": {
                "summary": "Run a sparql query",
                "produces": ["text/csv", "application/json", "text/plain", "text/turtle", "application/sparql-results+xml", "application/rdf+xml", "text/tab-separated-values", "application/sparql-results+json"],
                "description": "",
                "operationId": "sparql",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Invalid HTTP method"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "query",
                        "description": "a sparql query (e.g. select distinct ?Concept where {[] a ?Concept} LIMIT 5 , Describe &lt;http://purl.obolibrary.org/obo/TO_0000040 &gt;)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": ["text/csv", "text/html", "application/json", "text/plain", "text/turtle", "application/sparql-results+xml", "application/rdf+xml", "text/tab-separated-values", "application/sparql-results+json", "XML"]
                    }],
                "tags": ["general"]
            }
        },
        "/pathways/inWhichParticipatesGene/byId{format}": {
            "get": {
                "summary": "Retrieve IRI and name of pathways in which an id-given gene participates",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getPathwaysInWhichParticipatesGene",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "geneId",
                        "description": "Id of the gene (e.g. GRMZM2G004534, AT5G18200, Sb01g025590.1, LOC_Os02g35870.1, AT4G01970)",
                        "type": "integer",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["pathway"]
            }
        },
        "/qtls/associatedWithProteinId{format}": {
            "get": {
                "summary": "Get the list of QTLs associated with an protein Id",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getQtlsAssociatedWithProteinId",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "proteinId",
                        "description": "The id of the protein (e.g. Q9LL45)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["qtl"]
            }
        },
        "/qtls{format}": {
            "get": {
                "summary": "Retrieve complete URI and description of all QTLs from AgroLD",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getQtls",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["qtl"]
            }
        },
        "/genes/NumberOfCDS{format}": {
            "get": {
                "summary": "Retrieve complete URI and description of all genes from AgroLD in JSON format",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getCDSGene",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["gene"]
            }
        },
        "/predicates{format}": {
            "get": {
                "summary": "Retrieve complete URI of all predicates used in AgroLD in JSON",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getGraphPredicates",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "graphLocalName",
                        "description": "The local name of the graph in the namespace http://www.southgreen.fr/agrold/ of AgroLD (e.g. gramene.genes)",
                        "type": "string",
                        "required": true,
                        "enum": ["so", "go", "eco", "eo", "pato", "po", "to", "ncbitaxon", "gramene.genes", "uniprot.plants", "protein.annotations", "orygenesdb.o.s.indica", "orygenesdb.o.s.thaliana", "orygenesdb.o.s.japonica", "greenphyldb", "topgene", "qtl.annotations", "otl", "gramene.cyc", "gramene.qtl"]
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["general"]
            }
        },
        "/qtls/byKeyword{format}": {
            "get": {
                "summary": "Retrieve QTLs with URI or name or description containing the given keyword",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getQtlsByKeyWord",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "keyword",
                        "description": "The keyword to find (e.g. BNL6.32, flw4)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["qtl"]
            }
        },
        "/ontologies/terms/associatedWithGene{format}": {
            "get": {
                "summary": "Get the ontological annotation associated with the Gene",
                "produces": ["application/json"],
                "description": "",
                "operationId": "getOntoTermsAssociatedWithGene",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "geneId",
                        "description": "The id of the gene (e.g. OS02G0803700, OS06G0127000, AT1G09040, AT5G38250)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json"]
                    }],
                "tags": ["ontologies"]
            }
        },
        "/proteins/EncodedByGene{format}": {
            "get": {
                "summary": "Get URIs, ids, and name of proteins encoded by a gene given its ID",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getProteinsEncodedByGene",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "geneId",
                        "description": "The id of the gene (e.g. BAE47665, AT2G19710, AT4G35730)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["protein"]
            }
        },
        "/proteins/associatedWithQTL{format}": {
            "get": {
                "summary": "Get URIs, ids, and name of proteins associated with a QTL",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getProteinsAssociatedWithQtl",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "qtlId",
                        "description": "The id of the QTL (e.g. AQAA003)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["protein"]
            }
        },
        "/describe{format}": {
            "get": {
                "summary": "Retrieve complete description of a resource from AgroLD in JSON format",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getDescription",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "uri",
                        "description": "URI of the resource (e.g. http://www.southgreen.fr/agrold/ricecyc.pathway/FERMENTATION-PWY)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["general"]
            }
        },
        "/proteins/id/associatedWithOntoId{format}": {
            "get": {
                "summary": "Get ids of proteins associated with an ontological Id",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getProteinIdAssociatedWithOntoId",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "ontoId",
                        "description": "The id of the ontological element (e.g. GO:0003824)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["protein"]
            }
        },
        "/genes/encodingProtein{format}": {
            "get": {
                "summary": "Get URIs, ids, and name of genes encoding a protein given its ID",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getGenesEncodingProteins",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "proteinId",
                        "description": "The id of the gene (e.g. Q35985)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["gene"]
            }
        },
        "/ontologies/ids/byterm{format}": {
            "get": {
                "summary": "Returns all the IDs corresponding to an ontological term",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getIdByOntoTerm",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "ontoTerm",
                        "description": "The ontological term (e.g. homoaconitate hydratase activity)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["ontologies"]
            }
        },
        "/genes/participatingInPathway{format}": {
            "get": {
                "summary": "Complete URI of gene's description by pathway",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getGenesByPathways",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["gene"]
            }
        },
        "/ontologies/terms/associatedWithQtl{format}": {
            "get": {
                "summary": "Get the ontological terms associated with the QTL, and the association",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getOntoTermsAssociatedWithQtl",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "qtlId",
                        "description": "The id of the QTL (e.g. AQA001)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["ontologies"]
            }
        },
        "/ontologies/terms/children/byId{format}": {
            "get": {
                "summary": "Returns the children of an ontological element given its id",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getChildrenById",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "id",
                        "description": "The ID of an ontological resource (e.g. GO:0003824)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["ontologies"]
            }
        },
        "/genes/byLocus{format}": {
            "get": {
                "summary": "Give me the genes on chromosome chromosomeNum whose start position is between chromosomeStart and chromosomeEnd",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getGenesByLocus",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "chromosomeNum",
                        "description": "The chromosome number (e.g. 01)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "chromosomeStart",
                        "description": "The chromosome starting position (e.g. 10000)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "chromosomeEnd",
                        "description": "The chromosome ending position (e.g. 30000)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["gene"]
            }
        },
        "/proteins/byKeyword{format}": {
            "get": {
                "summary": "Retrieve proteins with URI or name or description containing the given keyword",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getProteinsByKeyWord",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "keyword",
                        "description": "The keyword to find (e.g. Putative, tbp1, leaf)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["protein"]
            }
        },
        "/genes{format}": {
            "get": {
                "summary": "Retrieve complete URI and description of all genes from AgroLD in JSON format",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getGenes",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["gene"]
            }
        },
        "/ontologies/terms/byId{format}": {
            "get": {
                "summary": "Returns the name of an ontological element corresponding to its given ID",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getOntoTermById",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "id",
                        "description": "The id (e.g. GO:0003824)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["ontologies"]
            }
        },
        "/webservices": {
            "post": {
                "summary": "Update a customizable web service",
                "security": [{
                        "basicAuth": []
                    }],
                "produces": ["text/plain"],
                "description": "",
                "operationId": "updateService",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "name",
                        "description": "The name of the service to update as supported by the HTTP protocol",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "httpMethod",
                        "description": "The the HTTP protocol method",
                        "type": "string",
                        "required": true,
                        "enum": ["get", "post"]
                    }, {
                        "schema": {
                            "$ref": "#/definitions/webservice"
                        },
                        "in": "body",
                        "name": "specification",
                        "description": "The specification of the service to be updated. Sepecify only the fields to be modified.",
                        "required": true
                    }],
                "tags": ["management"]
            },
            "get": {
                "summary": "JSON file containing this RESTful API's specification in the SWAGGER format",
                "produces": ["application/json"],
                "description": "",
                "operationId": "getServicesSpecifications",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                },
                "parameters": [],
                "tags": ["management"]
            },
            "delete": {
                "summary": "Delete a customizable web service",
                "security": [{
                        "basicAuth": []
                    }],
                "produces": ["text/plain"],
                "description": "",
                "operationId": "deleteService",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "name",
                        "description": "The name of the service to update as supported by the HTTP protocol",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "httpMethod",
                        "description": "The the HTTP protocol method",
                        "type": "string",
                        "required": true,
                        "enum": ["get"]
                    }],
                "tags": ["management"]
            },
            "put": {
                "summary": "Create  a new customizable web service (if it exists one with the same name and HTTP method this should be a new version)",
                "security": [{
                        "basicAuth": []
                    }],
                "produces": ["text/plain"],
                "description": "",
                "operationId": "addService",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "name",
                        "description": "The name of the service (e.g. servicename{format})",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "httpMethod",
                        "description": "The the HTTP protocol method (use POST to pass parameters in the request body instead of the query)",
                        "type": "string",
                        "required": true,
                        "enum": ["get", "post"]
                    }, {
                        "schema": {
                            "$ref": "#/definitions/webservice"
                        },
                        "in": "body",
                        "name": "specification",
                        "description": "The specification of the service to create",
                        "required": true
                    }],
                "tags": ["management"]
            }
        },
        "/ontologies/terms/ancestors/byId{format}": {
            "get": {
                "summary": "Returns all the IDs corresponding to an ontological term",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getAncestorById",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "id",
                        "description": "The ID of an ontological resource (e.g. GO:0004409 or G0:0016836)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "level",
                        "description": "The level of the ancestor (e.g. the level of the direct parent is 1)",
                        "type": "integer",
                        "minimum": 1,
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["ontologies"]
            }
        },
        "/ontologies/terms/associatedWithProtein{format}": {
            "get": {
                "summary": "Get the ontological terms associated with the Protein, and the association",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getOntoTermsAssociatedWithProtein",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "proteinId",
                        "description": "The id of the protein (e.g. A0A060D1L3)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["ontologies"]
            }
        },
        "/genes/byKeyword{format}": {
            "get": {
                "summary": "Retrieve genes with the URI or the name or the description containing the given keyword",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getGenesByKeyWord",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "keyword",
                        "description": "The keyword to find (e.g. FRK1, tcp2, stachyose, TBP1, fermentation, rice, oryza)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["gene"]
            }
        },
        "/genes/publications/byId{format}": {
            "get": {
                "summary": "Get publications of a gene",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getPublicationsOfGeneById",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "geneId",
                        "description": "The ID of the gene (e.g. Os05t0125000-01)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["gene"]
            }
        },
        "/proteins{format}": {
            "get": {
                "summary": "Retrieve complete URI and description of all proteins from AgroLD in JSON format",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getProteins",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["protein"]
            }
        },
        "/genes/seeAlso{format}": {
            "get": {
                "summary": "Retrieve the other links refering to this gene",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getSeeAlsoByURI",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "geneUri",
                        "description": "An URI of a gene (e.g. http://identifiers.org/ensembl.plant/AT3G62670, http://identifiers.org/rapdb.gene/Os01g0101500)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["gene"]
            }
        },
        "/ontologies/terms/parents/byId{format}": {
            "get": {
                "summary": "Returns the parents of an ontological element given its id",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getParentById",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "id",
                        "description": "The ID of an ontological resource (e.g. GO:0004409)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["ontologies"]
            }
        },
        "/ontologies/terms/descendants/byId{format}": {
            "get": {
                "summary": "Returns the descendents of an ontological element given its id",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getDescendentById",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "id",
                        "description": "The ID of an ontological resource (e.g. GO:0003824)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "level",
                        "description": "The level of the descendent (e.g. the level of the direct children is 1)",
                        "type": "integer",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["ontologies"]
            }
        },
        "/pathways/byKeyword{format}": {
            "get": {
                "summary": "Retrieve IRI and name of pathways given a keyword",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getPathwaysByKeyWord",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "keyword",
                        "description": "Id of the gene (e.g. fermentation, acetate)",
                        "type": "integer",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["pathway"]
            }
        },
        "/customizable/get_all_species": {
            "get": {
                "summary": "this service retrieves all species available in AgroLD.",
                "produces": ["text/plain", "text/xml"],
                "description": "string",
                "operationId": "getServiceName",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "sparql": "BASE <http://www.southgreen.fr/agrold/>\nPREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX vocab: <vocabulary/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nselect ?taxon_name ?label from <http://www.southgreen.fr/agrold/ncbitaxon>\nwhere \n{\n  ?taxon_name rdfs:label ?label.\n  { \nSELECT distinct ?taxon_name from \n<http://www.southgreen.fr/agrold/uniprot.plants>\n    WHERE \n{\n  ?Protein rdf:type <http://www.southgreen.fr/agrold/vocabulary/Protein>.\n      ?Protein vocab:taxon ?taxon_name .\n  } \n }\n }\nOFFSET ?page \nLIMIT ?pageSize",
                "parameters": [{
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }],
                "tags": ["customizable"]
            }
        },
        "/customizable/graph_relations": {
            "get": {
                "summary": "Retrieve complete URI of all predicates used in AgroLD in JSON",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "application/rdf+xml", "text/turtle", "text/plain", "text/x-html+tr", "application/vnd.ms-excel", "application/javascript"],
                "name": "graph_relations",
                "description": "BASE <http://www.southgreen.fr/agrold/>\nPREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT distinct ?relation\nWHERE { \n GRAPH ?graph { \n  ?subject ?relation ?object . \n } \n} \nORDER BY ?relation \nOFFSET ?page \nLIMIT ?pageSize",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "operationId": "getGraphRelations",
                "sparql": "BASE <http://www.southgreen.fr/agrold/>\nPREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT distinct ?relation\nWHERE { \n GRAPH ?graph { \n  ?subject ?relation ?object . \n } \n} \nORDER BY ?relation \nOFFSET ?page \nLIMIT ?pageSize",
                "parameters": [{
                        "in": "query",
                        "name": "graph",
                        "description": "exemple: <gramene.genes>",
                        "type": "string",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }],
                "tags": ["customizable", "general"]
            }
        },
        "/qtls/id/associatedWithOntoId{format}": {
            "get": {
                "summary": "Get ids of QTLs associated with an ontological Id",
                "produces": ["text/html", "application/sparql-results+json", "application/json", "application/sparql-results+xml", "text/tab-separated-values", "text/csv", "rdf/xml", "text/turtle", "text/plain"],
                "description": "",
                "operationId": "getQtlsIdAssociatedWithOntoId",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "unexpected error"
                    }
                },
                "parameters": [{
                        "in": "query",
                        "name": "ontoId",
                        "description": "The id of the ontological element (e.g. TO:0000040, TO:0000207, TO_0000370)",
                        "type": "string",
                        "required": true
                    }, {
                        "in": "query",
                        "name": "page",
                        "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "query",
                        "name": "pageSize",
                        "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                        "type": "integer",
                        "required": false
                    }, {
                        "in": "path",
                        "name": "format",
                        "description": "format in which the results set will be return (if empty or not supported, JSON is returned by default)",
                        "type": "string",
                        "required": true,
                        "enum": [".json", ".jsonld", ".xml", ".tsv", ".csv", ".rdf", ".html", ".ttl", ".n3"]
                    }],
                "tags": ["qtl"]
            }
        }
    },
    "schemes": ["http"],
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    },
    "securityDefinitions": {
        "basicAuth": {
            "type": "basic"
        }
    },
    "definitions": {
        "webservice": {
            "type": "object",
            "required": ["sparql", "operationId", "responses"],
            "properties": {
                "summary": {
                    "type": "string",
                    "example": "this service retrieves ..."
                },
                "produces": {
                    "type": "array",
                    "items": {
                        "description": "Response mime-type",
                        "type": "string"
                    },
                    "example": ["text/plain", "text/xml"]
                },
                "description": {
                    "type": "string"
                },
                "operationId": {
                    "type": "string",
                    "example": "getServiceName"
                },
                "responses": {
                    "additionalProperties": {
                        "type": "object"
                    },
                    "type": "object",
                    "example": {
                        "200": {
                            "description": "successful operation"
                        }
                    }
                },
                "sparql": {
                    "description": "The Sparql query to run",
                    "type": "string",
                    "example": "BASE <http://www.southgreen.fr/agrold/>\nPREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT distinct ?relation\nWHERE { \n GRAPH ?graph { \n  ?subject ?relation ?object . \n } \n} \nORDER BY ?relation \nOFFSET ?page \nLIMIT ?pageSize"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": ["in", "name", "required"],
                        "properties": {
                            "in": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string"
                            },
                            "enum": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "required": {
                                "type": "boolean"
                            }
                        }
                    },
                    "example": [{
                            "in": "query",
                            "name": "page",
                            "description": "number (>= 0) of the page of the result set to display (0 = the first page by default)",
                            "type": "integer",
                            "required": false
                        }, {
                            "in": "query",
                            "name": "pageSize",
                            "description": "size of a page of the result set. If = 0 then all results will be displayed. Default value: 10.",
                            "type": "integer",
                            "required": false
                        }]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "description": "a section of the interactive documentation ('customizable' wil be added automatically)",
                        "type": "string",
                        "example": "customizable"
                    }
                }
            }
        },
        "ApiResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "format": "int32",
                    "type": "integer",
                    "example": "200"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "swagger": "2.0",
    "info": {
        "license": {
            "name": "IBC Montpellier",
            "url": "http://agrold.southgreen.fr/agrold/about.jsp"
        },
        "contact": {
            "email": "agrolinkeddata@gmail.com"
        },
        "description": "This page provides information about the RESTful API of AgroLD.",
        "termsOfService": "http://www.agrold.org",
        "title": "AgroLD API",
        "version": "2.0 beta"
    },
    "tags": [{
            "name": "management",
            "description": "Handle customizable web sevices"
        }, {
            "name": "customizable",
            "description": "customizable web services"
        }, {
            "name": "general",
            "description": "General Services"
        }, {
            "name": "gene",
            "description": "Services over genes"
        }, {
            "name": "protein",
            "description": "Services over proteins"
        }, {
            "name": "qtl",
            "description": "Services over QTLs"
        }, {
            "name": "pathway",
            "description": "Services over pathways"
        }]
}